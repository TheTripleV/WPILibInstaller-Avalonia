import com.google.gson.GsonBuilder
import io.pry.gradle.offline_dependencies.OfflineDependenciesPlugin
import org.gradle.internal.os.OperatingSystem

buildscript {
    dependencies {
        classpath 'com.google.code.gson:gson:2.8.9'
    }
}

plugins {
    id 'java'
    id 'cpp'
    id "de.undercouch.download" version "4.1.2" apply false
    id "com.github.johnrengelman.shadow" version "7.1.2" apply false
}

apply from: "automation/macos_notarization.gradle"
apply plugin: OfflineDependenciesPlugin

ext.pubVersion = ''
if (project.hasProperty("publishVersion")) {
    pubVersion = project.publishVersion
} else {
    pubVersion = gradleRioVersion
}

if (pubVersion == '') {
    pubVersion = '0.0.1-unknown'
}

println pubVersion

project.ext.setProperty('toolchain-optional-roboRio', '')

if (project.hasProperty('linuxBuild')) {
    project.ext.forcePlatform = 'linuxx86'
    project.ext.forceNativeClassifier = 'linuxx86-64'
    project.ext.forceToolsClassifier = 'linuxx64'
    project.ext.forceCppToolsClassifier = 'linuxx86-64'
    project.ext.buildClassifier = 'Linux'
    offlineRepositoryRoot = "$buildDir/dependencies/linux"
    project.ext.archiveType = Tar
    project.ext.isUnix = true
    project.ext.dotnetRuntime = 'linux-x64'
} else if (project.hasProperty('macBuild')) {
    project.ext.forcePlatform = 'osx'
    project.ext.forceNativeClassifier = 'osxuniversal'
    project.ext.forceToolsClassifier = 'macx64'
    project.ext.forceCppToolsClassifier = 'osxuniversal'
    project.ext.buildClassifier = 'Mac'
    offlineRepositoryRoot = "$buildDir/dependencies/mac"
    project.ext.archiveType = Tar
    project.ext.isUnix = true
    project.ext.dotnetRuntime = 'osx-x64'
} else if (project.hasProperty('macBuildArm')) {
    project.ext.forcePlatform = 'osx'
    project.ext.forceNativeClassifier = 'osxuniversal'
    project.ext.forceToolsClassifier = 'macarm64'
    project.ext.forceCppToolsClassifier = 'osxuniversal'
    project.ext.buildClassifier = 'MacArm'
    offlineRepositoryRoot = "$buildDir/dependencies/mac"
    project.ext.archiveType = Tar
    project.ext.isUnix = true
    project.ext.dotnetRuntime = 'osx-arm64'
} else {
    project.ext.forcePlatform = 'windows'
    project.ext.forceNativeClassifier = 'windowsx86-64'
    project.ext.forceToolsClassifier = 'winx64'
    project.ext.forceCppToolsClassifier = 'windowsx86-64'
    project.ext.buildClassifier = 'Windows'
    offlineRepositoryRoot = "$buildDir/dependencies/windows"
    project.ext.archiveType = Zip
    project.ext.isUnix = false
    project.ext.dotnetRuntime = 'win-x64'
}

apply from: 'scripts/versions.gradle'

apply from: 'scripts/utils.gradle'
apply from: 'scripts/maven.gradle'

// Tools must happen after maven
apply from: 'scripts/tools.gradle'
apply from: 'scripts/vars.gradle'

ext.getGsonBuilder = {
    return new GsonBuilder()
}

def upgradeConfigFile = file("$buildDir/upgradeConfig.json")

def upgradeConfigFileTask = tasks.register('generateUpgradeConfigFile', Task) { Task task ->
    task.outputs.file upgradeConfigFile

    def configurations = []
    configurations << toolsConfig()
    configurations << mavenConfigSetup()
    configurations << varConfigSetup()

    configurations.each {
        it.first(task)
    }

    doLast {
        def config = [:]

        config['FrcYear'] = frcYear

        config['InstallerType'] = project.ext.buildClassifier

        configurations.each {
            it.second(config)
        }

        def gbuilder = getGsonBuilder()
        gbuilder.setPrettyPrinting()
        def json = gbuilder.create().toJson(config)

        upgradeConfigFile.parentFile.mkdirs()

        upgradeConfigFile.text = json
    }
}

def commonResources = { AbstractArchiveTask zip ->
    zip.dependsOn upgradeConfigFileTask
    zip.inputs.file upgradeConfigFile

    zip.from(upgradeConfigFile) {
        into '/installUtils'
    }


    toolsSetup(zip)
    mavenZipSetup(zip)
    varsZipSetup(zip)
}

def fullConfigFile = file("$buildDir/fullConfig.json")

def fullConfigFileTask = tasks.register('generateFullConfigFile', Task) { Task task ->
    task.outputs.file fullConfigFile

    def configurations = []

    configurations.each {
        it.first(task)
    }

    doLast {
        def config = [:]

        configurations.each {
            it.second(config)
        }

        def gbuilder = new GsonBuilder()
        gbuilder.setPrettyPrinting()
        def json = gbuilder.create().toJson(config)

        fullConfigFile.parentFile.mkdirs()

        fullConfigFile.text = json
    }
}

def generateFullResourcesTask = tasks.register('generateFullResources', project.ext.archiveType) {
    archiveBaseName = 'WPILib_' + buildClassifier + '-' + pubVersion + '-artifacts'

    destinationDirectory = file("$buildDir/outputs")

    duplicatesStrategy 'exclude'

    if (project.ext.isUnix) {
        extension = 'tar.gz'
        compression = Compression.GZIP
    }

    dependsOn fullConfigFileTask
    inputs.file fullConfigFile

    it.from(fullConfigFile) {
        into '/installUtils'
    }

    commonResources(it)

    if (OperatingSystem.current().isWindows()) {
        def task = it
        // Grab release shortcut creator
        project(':apps:WPILibShortcutCreator').application.binaries.whenElementFinalized { binary ->
            if (binary.name == 'mainRelease') {
                task.from(binary.executableFile) {
                    into '/installUtils'
                }
                task.dependsOn binary.executableFileProducer
            }
        }
    }
}


// Runs the entire pipeline and generates
tasks.register('generateInstallers', Task) {
    dependsOn generateFullResourcesTask
}

wrapper {
    gradleVersion = '7.5.1'
}
